/*
Нека е дадена квадратна матрица A от цели числа N ✕ N (2 ≤ N ≤ 100), представяща “лабиринт”.
Елементите на матрицата със стойност по-голяма от числото 0 смятаме за “проходими”, а всички останали — за “непроходими”.
“Низходящ път” в лабиринта наричаме всяка последователност от проходими елементи на матрицата, в която всеки следващ елемент е или вдясно, или под предишния.
Да се дефинира функция bool reachable (int A[][100], unsigned N, int sx, int sy, int target), която проверява дали в лабиринта, зададен чрез матрицата A, съществува низходящ път от елемента с координати (sx, sy) до някой елемент със стойност target такъв, че елементите на пътя да образуват ненамаляваща редица от числа.
Примерна матрица:
1   0  1  1
10 15  1  1
50 20 50 50
40  0 40 60
Пример: На фигурата такъв път съществува от елемента с координати (0, 0) до целеви елемент със стойност target = 60, но не и до целеви елемент със стойност target = 40.
*/
#include <iostream>

using namespace std;

bool reachable(int A[][100], unsigned N, int sx, int sy, int target)
{
  if (sx >= N || sy >= N || A[sy][sx] <= 0)
    return false;
  if (A[sy][sx] == target)
    return true;

  return ((sx < N ? (A[sy][sx] <= A[sy][sx + 1]) : 1) && reachable(A, N, sx + 1, sy, target)) || ((sy < N ? (A[sy][sx] <= A[sy + 1][sx]) : 1) && reachable(A, N, sx, sy + 1, target));
}

int main()
{
  int A[][100] = {{1, 0, 1, 1},
                  {10, 15, 1, 1},
                  {50, 20, 50, 50},
                  {40, 0, 40, 60}};

  cout << reachable(A, 4, 0, 0, 60) << endl;
  cout << reachable(A, 4, 0, 0, 40) << endl;

  return 0;
}