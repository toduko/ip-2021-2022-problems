/*
Нека е дадена квадратна матрица A от цели числа N ✕ N (2 ≤ N ≤ 100), представяща “лабиринт”.
Елементите на матрицата със стойност по-малка от числото 10 смятаме за “проходими”, а всички останали — за “непроходими”.
“Низходящ път” в лабиринта наричаме всяка последователност от проходими елементи на матрицата, в която всеки следващ елемент е или вдясно, или под предишния.
Да се дефинира функция bool reachable (int A[][100], unsigned N, int sx, int sy, int target), която проверява дали в лабиринта, зададен чрез матрицата A, съществува низходящ път от елемента с координати (sx, sy) до някой елемент със стойност target такъв, че всички останали елементи от пътя да имат стойности по-малки от target. 
Примерна матрица:
1 10 0 0
4 10 0 0
2  0 3 3
4 10 0 5
Пример: На примерната матрица такъв път съществува от елемента с координати (0, 0) до целеви елемент със стойност target = 5, но не и до целеви елемент със стойност target = 3.
*/
#include <iostream>

using namespace std;

bool reachable(int A[][100], unsigned N, int sx, int sy, int target)
{
  if (sx >= N || sy >= N || A[sy][sx] > target || A[sy][sx] >= 10)
    return false;
  if (A[sy][sx] == target)
    return true;

  return reachable(A, N, sx + 1, sy, target) || reachable(A, N, sx, sy + 1, target);
}

int main()
{
  int A[][100] = {{1, 10, 0, 0},
                {4, 10, 0, 0},
                {2, 0, 3, 3},
                {4, 10, 0, 5}};

  cout << reachable(A, 4, 0, 0, 5) << endl;
  cout << reachable(A, 4, 0, 0, 3) << endl;

  return 0;
}